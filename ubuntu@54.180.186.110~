from decimal import Decimal

from django import forms
from django.contrib.gis.geoip2 import GeoIP2
from django.db.models import (
    Sum, Min, Max, Count
)
from django.http import Http404
from django.utils.timezone import (
    now, timedelta, localtime, datetime, make_aware
)
from django.utils.translation import gettext_lazy as _
from geoip2.errors import AddressNotFoundError
from ipware.ip import get_ip
from model_utils import Choices

from member.models import (
    LoginLog, Profile
)
from . import models
from . import settings as shop_settings


class OrderForm(forms.ModelForm):
    agreement = forms.BooleanField(
        label=_('I agree to Commercial Law.'),
        help_text=_('Do you agree to buy items in your cart?')
    )

    agreement1 = forms.BooleanField(
        label=_('I purchase by myself on my own purpose.'),
        help_text=_('It is 100 percent fraud if you are asked to buy the codes.')
    )

    payment_method = forms.ChoiceField(
        required=True,
        choices=Choices(
            (0, 'bank_transfer', _('Bank Transfer')),
            (1, 'escrow', _('Escrow (KB)')),
            (2, 'paypal', _('PayPal')),
        ),
        widget=forms.RadioSelect(),
    )

    def __init__(self, *args, **kwargs):
        self.cart = kwargs.pop('cart', None)
        self.request = kwargs.pop('request', None)

        super(OrderForm, self).__init__(*args, **kwargs)

        self.fields['payment_method'].label = False
        self.fields['payment_method'].initial = models.Order.PAYMENT_METHOD_CHOICES.bank_transfer

    class Meta:
        model = models.Order
        fields = [
            'payment_method'
        ]

    def clean(self):
        if self.cart.is_empty:
            raise forms.ValidationError(_('Empty cart! Please, put items in your cart.'))

        if self.request.user.profile.allow_order:
            return

        total_order_count = self.request.user.profile.total_order_count

        max_price = self.request.user.profile.max_price

        date_of_birth = self.request.user.profile.date_of_birth

        not_purchased_months = self.request.user.profile.not_purchased_months

        phone_verified_status = self.request.user.profile.phone_verified_status \
                                == Profile.PHONE_VERIFIED_STATUS_CHOICES.verified

        document_verified_status = self.request.user.profile.document_verified

        # 첫 주문 제한: 문화/해피/도서/스마트문상, 일일 액면가누적합계 20만원 초과 주문 금지
        # 첫 주문 후 48시간 이내 제한: 문화/해피/도서/스마트문상, 일일 액면가누적합계 20만원 초과 주문 금지
        # 첫 주문 제한: 구글, 액면가누적합계 50만원 초과 주문 금지
        # 첫 주문 후 24시간 이내 제한: 구글, 액면가누적합계 50만원 초과 주문 금지
        total_list_price = 0
        order_selling_price = 0

        for item in self.cart.items:
            total_list_price += item.product.list_price * item.quantity
            order_selling_price += item.product.selling_price * item.quantity

        if int(self.cleaned_data['payment_method']) == models.Order.PAYMENT_METHOD_CHOICES.paypal:
            # 페이팔 최소 결제 금액
            if self.cart.total < Decimal(shop_settings.PAYPAL_MINIMUM_ORDER_AMOUNT):
                raise forms.ValidationError(
                    _('You have to buy more than {} KRW.').format(shop_settings.PAYPAL_MINIMUM_ORDER_AMOUNT)
                )

            # 페이팔 한국 내 결제 불가
            try:
                ip_address = get_ip(self.request)
                if ip_address not in ['127.0.0.1']:
                    country = GeoIP2().country(ip_address)

                    if country['country_code'] and country['country_code'].upper() == 'KR':
                        raise forms.ValidationError(_('PayPal is not allowed in Korea.'))

            except AddressNotFoundError:
                pass

            if total_order_count == 0 and total_list_price > Decimal(shop_settings.SUSPICIOUS_AMOUNT15):
                # 페이팔 첫 결제 15만원 이상 결제 불가
                raise forms.ValidationError(_('You cannot buy more than 150,000 KRW.'))
            elif self.request.user.date_joined > make_aware(datetime(2019, 4, 1)):
                paid_total_list_price = self.request.user.shop_order_owned \
                    .filter(is_removed=False,
                            status__in=[models.Order.STATUS_CHOICES.payment_completed,
                                        models.Order.STATUS_CHOICES.under_review,
                                        models.Order.STATUS_CHOICES.payment_verified,
                                        models.Order.STATUS_CHOICES.shipped,
                                        models.Order.STATUS_CHOICES.refund_requested],
                            created__gte=make_aware(localtime().now() - timedelta(days=30))) \
                    .aggregate(Sum('total_list_price'))['total_list_price__sum']

                total_list_price += paid_total_list_price if paid_total_list_price else 0

                if not document_verified_status and total_list_price > Decimal(shop_settings.SUSPICIOUS_AMOUNT15):
                    # 2019년 4월 이후 가입자 30만원 초과 구매 시 무조건 한국 서류본인인증
                    raise forms.ValidationError(_('Complete document verification with Korean Photo ID.'))

        # 6시간 이내 중복 IP 주소로 중복 주문 불가
        login_log_result = LoginLog.objects \
            .select_related('user') \
            .filter(ip_address=get_ip(self.request),
                    created__gte=make_aware(localtime().today() - timedelta(hours=shop_settings.RECENT_LOGIN_IP_HOURS))) \
            .exclude(user__id=self.request.user.pk) \
            .annotate(Count('user_id', distinct=True))

        if login_log_result:
            raise forms.ValidationError(
                _('You have access log within {} hrs.').format(shop_settings.RECENT_LOGIN_IP_HOURS)
            )

        # 중복 주문 불가
        pending_order_count = self.request.user.shop_order_owned \
            .filter(is_removed=False,
                    status__in=[models.Order.STATUS_CHOICES.payment_pending, ]) \
            .aggregate(Count('id'))['id__count']

        if pending_order_count > 0:
            raise forms.ValidationError(
                _('Delete order first before the new order.')
            )

        # 미성년자 월간 15만원 초과 구매 불가
        if phone_verified_status and date_of_birth and localtime().date() - date_of_birth < timedelta(days=365 * 18):
            paid_total_list_price = self.request.user.shop_order_owned \
                .filter(is_removed=False,
                        status__in=[models.Order.STATUS_CHOICES.payment_completed,
                                    models.Order.STATUS_CHOICES.under_review,
                                    models.Order.STATUS_CHOICES.payment_verified,
                                    models.Order.STATUS_CHOICES.shipped,
                                    models.Order.STATUS_CHOICES.refund_requested],
                        created__gte=make_aware(localtime().now() - timedelta(days=30))) \
                .aggregate(Sum('total_list_price'))['total_list_price__sum']

            total_list_price += paid_total_list_price if paid_total_list_price else 0

            if total_list_price > Decimal(shop_settings.SUSPICIOUS_AMOUNT15):
                raise forms.ValidationError(
                    _('Under 18, You cannot buy more than 150,000 KRW.')
                )

        has_limit_20 = False
        has_limit_30 = False

        for item in self.cart.items:
            if item.product.name in ['문화상품권', '해피머니', '도서문화상품권', '스마트문화상품권']:
                has_limit_20 = True
                break

        for item in self.cart.items:
            if item.product.name not in ['문화상품권', '해피머니', '도서문화상품권', '스마트문화상품권']:
                has_limit_20 = False
                break

        for item in self.cart.items:
            if item.product.name in ['구글기프트카드', ]:
                has_limit_30 = True
                break

        for item in self.cart.items:
            if item.product.name not in ['구글기프트카드', ]:
                has_limit_30 = False
                break

        if total_order_count == 0:
            if not phone_verified_status \
                    and int(self.cleaned_data['payment_method']) in [models.Order.PAYMENT_METHOD_CHOICES.bank_transfer,
                                                                     models.Order.PAYMENT_METHOD_CHOICES.escrow]:
                # 계좌이체, 에스크로 첫 구매 -> 휴대폰인증 요청
                raise forms.ValidationError(
                    _('Complete cellphone verification.')
                )

            if has_limit_20 and total_list_price > Decimal(shop_settings.SUSPICIOUS_AMOUNT20):
                # 문화, 해피, 도서, 스마트 20만원 초과 -> 첫 주문 불가
                raise forms.ValidationError(
                    _('You cannot buy culture more than {} KRW.').format(shop_settings.SUSPICIOUS_AMOUNT20)
                )

            elif has_limit_20 and total_list_price >= Decimal(shop_settings.SUSPICIOUS_AMOUNT20) \
                    and not document_verified_status:
                # 문화, 해피, 도서, 스마트 20만원 이상, 서류본인인증 안함 -> 서류본인인증 요청
                raise forms.ValidationError(
                    _('Complete document verification.')
                )

            elif has_limit_30 and total_list_price > Decimal(shop_settings.SUSPICIOUS_AMOUNT50):
                # 구글 50만원 초과 -> 첫 주문 불가
                raise forms.ValidationError(
                    _('You cannot buy google more than {} KRW.').format(shop_settings.SUSPICIOUS_AMOUNT50)
                )

            elif has_limit_30 and total_list_price >= Decimal(shop_settings.SUSPICIOUS_AMOUNT30) \
                    and not document_verified_status:
                # 구글 30만원 이상, 서류본인인증 안함 -> 서류본인인증 요청
                raise forms.ValidationError(
                    _('Complete document verification.')
                )

            elif total_list_price > Decimal(shop_settings.SUSPICIOUS_AMOUNT50):
                # 기타 50만원 초과 -> 첫 주문 불가
                raise forms.ValidationError(
                    _('You cannot buy more than {} KRW.').format(shop_settings.SUSPICIOUS_AMOUNT50)
                )

            elif total_list_price >= Decimal(shop_settings.SUSPICIOUS_AMOUNT30) \
                    and not document_verified_status:
                # 기타 30만원 이상, 서류본인인증 안함 -> 서류본인인증 요청
                raise forms.ValidationError(
                    _('Complete document verification.')
                )

        elif total_order_count > 0:
            paid_total_list_price = self.request.user.shop_order_owned \
                .filter(is_removed=False,
                        status__in=[models.Order.STATUS_CHOICES.payment_completed,
                                    models.Order.STATUS_CHOICES.under_review,
                                    models.Order.STATUS_CHOICES.payment_verified,
                                    models.Order.STATUS_CHOICES.shipped,
                                    models.Order.STATUS_CHOICES.refund_requested],
                        created__gte=make_aware(localtime().now() - timedelta(hours=24))) \
                .aggregate(Sum('total_list_price'))['total_list_price__sum']

            total_list_price += paid_total_list_price if paid_total_list_price else 0

            order_history = self.request.user.shop_order_owned \
                .filter(is_removed=False,
                        status__in=[models.Order.STATUS_CHOICES.payment_completed,
                                    models.Order.STATUS_CHOICES.under_review,
                                    models.Order.STATUS_CHOICES.payment_verified,
                                    models.Order.STATUS_CHOICES.shipped]) \
                .aggregate(Min('created'), Max('created'))

            if order_history['created__min']:
                if self.request.user.profile.phone_verified_status \
                        == Profile.PHONE_VERIFIED_STATUS_CHOICES.revoked:
                    # 휴면계정 -> 휴대폰인증 요청
                    raise forms.ValidationError(
                        _('Activate your account by cellphone verification.')
                    )

                if has_limit_20:
                    if total_list_price > Decimal(shop_settings.SUSPICIOUS_AMOUNT20) \
                            and now() - order_history['created__min'] \
                            < timedelta(hours=shop_settings.FIRST_ORDER_LIMIT_HOURS):
                        # 문화, 해피, 도서 최초구매 후 48시간 이내, 20만원 초과 -> 주문 불가
                        raise forms.ValidationError(
                            _('You cannot buy culture more than {} KRW within 48 hrs from the first order date.')
                                .format(shop_settings.SUSPICIOUS_AMOUNT20)
                        )

                    elif total_list_price >= Decimal(shop_settings.SUSPICIOUS_AMOUNT20) \
                            and now() - order_history['created__min'] \
                            < timedelta(hours=shop_settings.FIRST_ORDER_LIMIT_HOURS) \
                            and not document_verified_status:
                        # 문화, 해피, 도서 최초구매 후 48시간 이내, 20만원 이상, 서류본인인증 안함 -> 서류본인인증 요청
                        raise forms.ValidationError(
                            _('Complete document verification.')
                        )

                    elif total_list_price >= Decimal(shop_settings.SUSPICIOUS_AMOUNT20) > max_price \
                            and not document_verified_status:
                        # 문화, 해피, 도서 20만원 이상, 서류본인인증 안함, 개인최대구매액 20만원 미만 -> 서류본인인증 요청
                        raise forms.ValidationError(
                            _('Complete document verification.')
                        )

                    elif total_list_price > Decimal(shop_settings.SUSPICIOUS_AMOUNT20) \
                            and not_purchased_months:
                        # 문화, 해피, 도서 60일 이상 구매 안 한 경우(48시간 동안), 20만원 초과 -> 주문 불가
                        raise forms.ValidationError(
                            _('You cannot buy culture more than {} KRW within 48 hrs'
                              ' because you have not purchased for 2 months.').format(shop_settings.SUSPICIOUS_AMOUNT20)
                        )

                    elif total_list_price > Decimal(shop_settings.SUSPICIOUS_AMOUNT20) \
                            and total_order_count <= 5 \
                            and order_history['created__max'] \
                            and now() - order_history['created__max'] < timedelta(minutes=60):
                        # 문화, 해피, 도서, 5회 이하 구매, 20만원 초과, 1시간 이내 재주문 -> 주문 불가
                        raise forms.ValidationError(
                            _('You may order 1 hour after last purchase.')
                        )

                    elif shop_settings.OPENING_TIME > localtime().now().hour >= shop_settings.CLOSING_TIME \
                            and total_list_price >= Decimal(shop_settings.SUSPICIOUS_AMOUNT20) \
                            and not document_verified_status:
                        # 영업시간 외 (새벽1시~오전9시), 문화, 해피, 도서 20만원 이상, 서류본인인증 안함 -> 서류본인인증 요청
                        raise forms.ValidationError(
                            _('Complete document verification at night.')
                        )

                elif has_limit_30:
                    if total_list_price > Decimal(shop_settings.SUSPICIOUS_AMOUNT50) \
                            and now() - order_history['created__min'] \
                            < timedelta(hours=shop_settings.FIRST_ORDER_LIMIT_HOURS):
                        # 구글, 최초구매 후 48시간 이내, 50만원 초과 -> 주문 불가
                        raise forms.ValidationError(
                            _('You cannot buy google more than {} KRW within 48 hrs from the first order date.')
                                .format(shop_settings.SUSPICIOUS_AMOUNT50)
                        )

                    elif total_list_price >= Decimal(shop_settings.SUSPICIOUS_AMOUNT30) \
                            and now() - order_history['created__min'] \
                            < timedelta(hours=shop_settings.FIRST_ORDER_LIMIT_HOURS) \
                            and not document_verified_status:
                        # 구글, 최초구매 후 48시간 이내, 30만원 이상, 서류본인인증 안함 -> 서류본인인증 요청
                        raise forms.ValidationError(
                            _('Complete document verification.')
                        )

                    elif total_list_price >= Decimal(shop_settings.SUSPICIOUS_AMOUNT30) > max_price \
                            and not document_verified_status:
                        # 구글, 30만원 이상, 서류본인인증 안함, 개인최대구매액 30만원 미만 -> 서류본인인증 요청
                        raise forms.ValidationError(
                            _('Complete document verification.')
                        )

                    elif total_list_price > Decimal(shop_settings.SUSPICIOUS_AMOUNT50) \
                            and not_purchased_months:
                        # 구글 60일 이상 구매 안 한 경우(48시간 동안), 50만원 초과 -> 주문 불가
                        raise forms.ValidationError(
                            _('You cannot buy google more than {} KRW within 48 hrs'
                              ' because you have not purchased for 2 months.').format(shop_settings.SUSPICIOUS_AMOUNT50)
                        )

                    elif total_list_price > Decimal(shop_settings.SUSPICIOUS_AMOUNT50) \
                            and total_order_count <= 5 \
                            and order_history['created__max'] \
                            and now() - order_history['created__max'] < timedelta(minutes=60):
                        # 구글 5회 이하 구매, 50만원 초과, 1시간 이내 재주문 -> 주문 불가
                        raise forms.ValidationError(
                            _('You may order 1 hour after last purchase.')
                        )

                    elif shop_settings.OPENING_TIME > localtime().now().hour >= shop_settings.CLOSING_TIME \
                            and total_list_price >= Decimal(shop_settings.SUSPICIOUS_AMOUNT30) \
                            and not document_verified_status:
                        # 영업시간 외 (새벽1시~오전9시), 구글 30만원 이상, 서류본인인증 안함 -> 서류본인인증 요청
                        raise forms.ValidationError(
                            _('Complete document verification at night.')
                        )

                elif total_list_price > Decimal(shop_settings.SUSPICIOUS_AMOUNT50) \
                        and now() - order_history['created__min'] \
                        < timedelta(hours=shop_settings.FIRST_ORDER_LIMIT_HOURS):
                    # 기타, 최초구매 후 48시간 이내, 50만원 초과 -> 주문 불가
                    raise forms.ValidationError(
                        _('You cannot buy more than {} KRW within 48 hrs from the first order date.')
                            .format(shop_settings.SUSPICIOUS_AMOUNT50)
                    )

                elif total_list_price > Decimal(shop_settings.SUSPICIOUS_AMOUNT30) \
                        and now() - order_history['created__min'] \
                        < timedelta(hours=shop_settings.FIRST_ORDER_LIMIT_HOURS) \
                        and not document_verified_status:
                    # 기타, 최초구매 후 48시간 이내, 30만원 이상, 서류본인인증 안함 -> 서류본인인증 요청
                    raise forms.ValidationError(
                        _('Complete document verification.')
                    )

                elif total_list_price >= Decimal(shop_settings.SUSPICIOUS_AMOUNT30) > max_price \
                        and not document_verified_status:
                    # 기타, 30만원 이상, 개인최대구매액 30만원 미만, 서류본인인증 안함 -> 서류본인인증 요청
                    raise forms.ValidationError(
                        _('Complete document verification.')
                    )

                elif total_list_price > Decimal(shop_settings.SUSPICIOUS_AMOUNT50) \
                        and not_purchased_months:
                    # 기타, 60일 이상 구매 안 한 경우(48시간 동안), 50만원 초과 -> 주문 불가
                    raise forms.ValidationError(
                        _('You cannot buy more than {} KRW within 48 hrs'
                          ' because you have not purchased for 2 months.').format(shop_settings.SUSPICIOUS_AMOUNT50)
                    )

                elif total_list_price > Decimal(shop_settings.SUSPICIOUS_AMOUNT50) \
                        and total_order_count <= 5 \
                        and order_history['created__max'] \
                        and now() - order_history['created__max'] < timedelta(minutes=60):
                    # 기타, 5회 이하 구매, 50만원 초과, 1시간 이내 재주문 -> 주문 불가
                    raise forms.ValidationError(
                        _('You may order 1 hour after last purchase.')
                    )

                if shop_settings.OPENING_TIME > localtime().now().hour >= shop_settings.CLOSING_TIME:
                    # 영업시간 외 (새벽1시~오전9시)

                    if order_selling_price > Decimal(shop_settings.SUSPICIOUS_AMOUNT20) \
                            and order_selling_price > max_price:
                        # 20만원 초과 and 개인 과거 최대구매액 초과 구매 불가
                        raise forms.ValidationError(
                            _('You cannot buy more than the maximum of your past order amount.')
                        )

                    if total_list_price >= Decimal(shop_settings.SUSPICIOUS_AMOUNT50) \
                            and not document_verified_status:
                        # 영업시간 외 (새벽1시~오전9시), 50만원 이상, 서류본인인증 안함 -> 서류본인인증 요청
                        raise forms.ValidationError(
                            _('Complete document verification at night.')
                        )

                    if not (order_history['created__min']
                            and now() - order_history['created__min'] > timedelta(days=14)
                            and order_history['created__max']
                            and now() - order_history['created__max'] < timedelta(days=30)
                            and total_order_count > 5):
                        # 단골고객 (첫 구매 14일 초과, 마지막 구매일 30일 미만, 구매횟수 5회 초과) 아닌 경우
                        if (has_limit_20 and total_list_price > Decimal(shop_settings.SUSPICIOUS_AMOUNT20)) \
                                or (has_limit_30 and total_list_price > Decimal(shop_settings.SUSPICIOUS_AMOUNT50)) \
                                or (total_list_price > Decimal(shop_settings.SUSPICIOUS_AMOUNT50)):
                            # 일일한도 초과 구매 불가
                            raise forms.ValidationError(
                                _('Over amount for auto-send during night time')
                            )

            elif self.request.user.date_joined > make_aware(datetime(2018, 5, 11)):
                raise Http404('Order failed')

            '''
            elif not phone_verified_status \
                    and int(self.cleaned_data['payment_method']) in [models.Order.PAYMENT_METHOD_CHOICES.bank_transfer,
                                                                     models.Order.PAYMENT_METHOD_CHOICES.escrow] \
                    and total_list_price >= Decimal(shop_settings.SUSPICIOUS_AMOUNT30) > max_price:
                # 리뉴얼 전 30만원 미만 구매 고객 계좌이체, 에스크로 구매 -> 휴대폰인증완료 요청
                raise forms.ValidationError(
                    _('Complete cellphone verification.')
                )
            '''


class RefundForm(forms.ModelForm):
    vouchers = forms.CharField()

    message = forms.CharField(
        label=_('order message'),
        help_text=_('Your bank account and your full name'),
        widget=forms.TextInput(),
    )

    def __init__(self, *args, **kwargs):
        self.request = kwargs.pop('request', None)
        self.voucher_required = kwargs.pop('voucher_required', True)
        self.message_required = kwargs.pop('message_required', True)

        super(RefundForm, self).__init__(*args, **kwargs)

        self.fields['vouchers'].required = self.voucher_required
        self.fields['message'].required = self.message_required

    class Meta:
        model = models.Order
        fields = [
        ]

    def clean_vouchers(self):
        voucher_dict = {}

        for i in self.data.getlist('vouchers'):
            k, v = map(int, i.split('_'))

            if k in voucher_dict:
                voucher_dict[k].append(v)
            else:
                voucher_dict[k] = [v]

        order_product_queryset = models.OrderProduct.objects \
            .select_related('order') \
            .prefetch_related('codes', 'codes__voucher') \
            .filter(pk__in=voucher_dict.keys(),
                    order__user=self.request.user)

        self.cleaned_data['order_product_queryset'] = order_product_queryset
        self.cleaned_data['voucher_dict'] = voucher_dict

    def clean(self):
        if shop_settings.OPENING_TIME > localtime().now().hour >= shop_settings.CLOSING_TIME:
            raise forms.ValidationError(_('You cannot refund at night.'))
